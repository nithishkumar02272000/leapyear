# -*- coding: utf-8 -*-
"""final project ML

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12sW22j0FbrD9cCeU6K03jDfNa07w7b1C
"""

import pandas as pd
df=pd.read_csv("train_u6lujuX_CVtuZ9i (1).csv")
df.head()


from google.colab import drive
drive.mount('/content/drive')

df.describe()

df.info()

df.isnull().sum()

df["Gender"].fillna(df['Gender'].mode()[0],inplace=True)
df["Married"].fillna(df['Married'].mode()[0],inplace=True)
df["Self_Employed"].fillna(df['Self_Employed'].mode()[0],inplace=True)
df["Dependents"].fillna(df['Dependents'].mode()[0],inplace=True)
df["LoanAmount"].fillna(df['LoanAmount'].mean(),inplace=True)
df["Loan_Amount_Term"].fillna(df['Loan_Amount_Term'].mean(),inplace=True)
df["Credit_History"].fillna(df['Credit_History'].mean(),inplace=True)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['Gender']=le.fit_transform(df['Gender'])
df['Married']=le.fit_transform(df['Married'])
df['Education']=le.fit_transform(df['Education'])
df['Self_Employed']=le.fit_transform(df['Self_Employed'])
df['Property_Area']=le.fit_transform(df['Property_Area'])
df['Loan_Status']=le.fit_transform(df['Loan_Status'])
df['Dependents']=le.fit_transform(df['Dependents'])
df['Loan_ID']=le.fit_transform(df['Loan_ID'])
df['Credit_History']=le.fit_transform(df['Credit_History'])

df.isnull().sum()

df.head()

x=df.iloc[:,:-1]
x

y=df.iloc[:,12]
y

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.tree import DecisionTreeClassifier
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=1)
dt=DecisionTreeClassifier()
dt=dt.fit(x_train,y_train)
y_pred=dt.predict(x_test)
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)
print("Accuracy:",round(result2*100,2))

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr=lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
result12 = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result12)
result13 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result13)
result14 = accuracy_score(y_test,y_pred)
print("Accuracy:",round(result14*100,2))

from sklearn.ensemble import GradientBoostingClassifier
gb=GradientBoostingClassifier()
gb=gb.fit(x_train,y_train)
y_pred=gb.predict(x_test)
result21 = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result21)
result22 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result22)
result23 = accuracy_score(y_test,y_pred)
print("Accuracy:",round(result23*100,2))

from sklearn.naive_bayes import GaussianNB
nb=GradientBoostingClassifier()
nb=nb.fit(x_train,y_train)
y_pred=nb.predict(x_test)
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)
print("Accuracy:",round(result2*100,2))

from sklearn.neighbors import KNeighborsClassifier

lr=KNeighborsClassifier()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

from sklearn import svm
lr=svm.SVC()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

from sklearn.linear_model import SGDClassifier

lr=SGDClassifier()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

from sklearn.neighbors import NearestCentroid
lr=NearestCentroid()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

from sklearn.ensemble import RandomForestClassifier
lr=RandomForestClassifier()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

from sklearn.ensemble import RandomForestClassifier
lr=RandomForestClassifier()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

from sklearn.ensemble import AdaBoostClassifier
lr=AdaBoostClassifier()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

from sklearn.ensemble import HistGradientBoostingClassifier
lr=HistGradientBoostingClassifier()
lr.fit(x_train,y_train)
y_pred=lr.predict(x_test)
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
result = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(result)
result1 = classification_report(y_test, y_pred)
print("Classification Report:",)
print (result1)
result2 = accuracy_score(y_test,y_pred)*100.2
print("Accuracy:",result2)

# Commented out IPython magic to ensure Python compatibility.
#visualization
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
sns.countplot(df['Loan_Status'],palette='Accent')

sns.countplot(df['Gender'],palette='Accent')

sns.countplot(df['Married'],palette='Accent')

sns.countplot(df['Education'],palette='Accent')

sns.countplot(df['Self_Employed'],palette='Accent')

sns.countplot(df['Property_Area'],palette='Accent')

sns.countplot(df['Dependents'],palette='Accent')

sns.boxplot(x='Loan_Status',y='ApplicantIncome',data=df)

sns.boxplot(x='Loan_Status',y='CoapplicantIncome',data=df)

sns.boxplot(x='Gender',y='LoanAmount',data=df)

sns.catplot(x='Gender',y='LoanAmount',data=df,kind='box',hue='Loan_Status',col='Married')

plt.figure(figsize=(10,10))
corr_matrix=df.corr()
sns.heatmap(corr_matrix,annot=True)
plt.show()
